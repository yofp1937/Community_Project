{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Project\\\\Community_Project\\\\client\\\\src\\\\Pages\\\\PostWrite\\\\PostWrite.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styles from './PostWrite.module.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PostWrite() {\n  _s();\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [img, setImg] = useState([]);\n  const handleWrite = async () => {\n    // 로그인 안돼있으면 작성 불가\n    if (!localStorage.token) {\n      alert(\"글 쓰기는 로그인이 필요합니다.\");\n      window.location.href = '/login';\n      return;\n    }\n\n    // 글제목, 내용 입력 안돼있으면 return\n    if (title === \"\") {\n      alert(\"제목을 입력해주세요.\");\n      return;\n    } else if (title.length > 20) {\n      alert(\"제목은 20글자를 초과 할 수 없습니다.\");\n      return;\n    }\n    if (content === \"\") {\n      alert(\"내용을 입력해주세요.\");\n      return;\n    }\n\n    // 조건 만족하면 서버로 axios 요청\n    try {\n      // 이미지는 FormData로 전송해야하기때문에 FormData 객체 생성\n      const formData = new FormData();\n      // 폼에 JSON타입 텍스트 정보 추가\n      formData.append('data', JSON.stringify({\n        title: title,\n        content: content,\n        author: localStorage.getItem('id')\n      }));\n      // 제목, 내용, 작성자, 이미지 파일 추가\n      for (let i = 0; i < img.length; i++) {\n        formData.append('files', img[i]);\n      }\n      const response = await axios.post('/api/postwrite', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          // FormData를 사용할 때는 Content-Type을 지정해야함\n          charset: 'utf-8'\n        }\n      });\n      if (response.status === 200) {\n        // 글 작성 후 메인으로 이동\n        alert(\"게시글 작성 완료\");\n        window.location.href = '/';\n      }\n    } catch (error) {\n      if (error.response.data) {\n        alert(\"에러: \" + error.response.data);\n      } else {\n        alert(\"에러 발생\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.postwrite,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: styles.input_title,\n      placeholder: \"\\uC81C\\uBAA9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694(\\uCD5C\\uB300 20\\uAE00\\uC790)\",\n      onChange: e => setTitle(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: styles.input_content,\n      placeholder: \"\\uAE00 \\uB0B4\\uC6A9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n      onChange: e => setContent(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 124\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      className: styles.input_image,\n      multiple: true,\n      onChange: e => setImg(e.target.files)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 117\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: styles.btn_submit,\n      onClick: handleWrite,\n      children: \"\\uB4F1\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(PostWrite, \"G9yzwQCTdjGB9APtc5SY7rxUgs4=\");\n_c = PostWrite;\nexport default PostWrite;\nvar _c;\n$RefreshReg$(_c, \"PostWrite\");","map":{"version":3,"names":["React","useState","styles","axios","jsxDEV","_jsxDEV","PostWrite","_s","title","setTitle","content","setContent","img","setImg","handleWrite","localStorage","token","alert","window","location","href","length","formData","FormData","append","JSON","stringify","author","getItem","i","response","post","headers","charset","status","error","data","className","postwrite","children","type","input_title","placeholder","onChange","e","target","value","fileName","_jsxFileName","lineNumber","columnNumber","input_content","input_image","multiple","files","btn_submit","onClick","_c","$RefreshReg$"],"sources":["D:/Web Project/Community_Project/client/src/Pages/PostWrite/PostWrite.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styles from './PostWrite.module.css';\r\nimport axios from 'axios';\r\n\r\nfunction PostWrite() {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [content, setContent] = useState(\"\");\r\n    const [img, setImg] = useState([]);\r\n\r\n    const handleWrite = async () => {\r\n        // 로그인 안돼있으면 작성 불가\r\n        if(!localStorage.token){\r\n            alert(\"글 쓰기는 로그인이 필요합니다.\");\r\n            window.location.href='/login';\r\n            return;\r\n        }\r\n    \r\n        // 글제목, 내용 입력 안돼있으면 return\r\n        if(title === \"\"){\r\n            alert(\"제목을 입력해주세요.\");\r\n            return;\r\n        } else if (title.length > 20){\r\n            alert(\"제목은 20글자를 초과 할 수 없습니다.\")\r\n            return;\r\n        }\r\n        if(content === \"\"){\r\n            alert(\"내용을 입력해주세요.\");\r\n            return;\r\n        }\r\n\r\n        // 조건 만족하면 서버로 axios 요청\r\n        try {\r\n          // 이미지는 FormData로 전송해야하기때문에 FormData 객체 생성\r\n          const formData = new FormData();\r\n          // 폼에 JSON타입 텍스트 정보 추가\r\n          formData.append(\r\n            'data',\r\n            JSON.stringify({\r\n              title: title,\r\n              content: content,\r\n              author: localStorage.getItem('id'),\r\n            })\r\n          );\r\n          // 제목, 내용, 작성자, 이미지 파일 추가\r\n          for (let i = 0; i < img.length; i++) {\r\n              formData.append('files', img[i]);\r\n          }\r\n\r\n          const response = await axios.post('/api/postwrite', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data', // FormData를 사용할 때는 Content-Type을 지정해야함\r\n                charset: 'utf-8',\r\n            }\r\n          });\r\n    \r\n          if(response.status === 200){ // 글 작성 후 메인으로 이동\r\n            alert(\"게시글 작성 완료\");\r\n            window.location.href = '/';\r\n          } \r\n    \r\n        } catch (error) {\r\n          if (error.response.data) {\r\n            alert(\"에러: \" + error.response.data);\r\n          } else {\r\n            alert(\"에러 발생\");\r\n          }\r\n        }\r\n    \r\n      };\r\n\r\n  return (\r\n    <div className={styles.postwrite}>\r\n        <input type=\"text\" className={styles.input_title} placeholder='제목을 입력하세요(최대 20글자)' onChange={(e) => setTitle(e.target.value)}/>\r\n        <hr/>\r\n        <textarea className={styles.input_content} placeholder='글 내용을 입력하세요' onChange={(e) => setContent(e.target.value)}/><br/>\r\n        <input type=\"file\" className={styles.input_image} multiple onChange={(e) => setImg(e.target.files)}></input><br/>\r\n        <hr/>\r\n        <button type=\"button\" className={styles.btn_submit} onClick={handleWrite}>등록</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostWrite;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}