{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Project\\\\Community_Project\\\\client\\\\src\\\\Pages\\\\PostWrite\\\\PostWrite.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styles from './PostWrite.module.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PostWrite() {\n  _s();\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const handleWrite = async () => {\n    // 로그인 안돼있으면 작성 불가\n    if (!localStorage.token) {\n      alert(\"글 쓰기는 로그인이 필요합니다.\");\n      return;\n    }\n\n    // 글제목, 내용 입력 안돼있으면 return\n    if (title === \"\") {\n      alert(\"제목을 입력해주세요.\");\n      return;\n    } else if (title.length > 20) {\n      alert(\"제목은 20글자를 초과 할 수 없습니다.\");\n      return;\n    }\n    if (content === \"\") {\n      alert(\"내용을 입력해주세요.\");\n      return;\n    }\n\n    // 조건 만족하면 서버로 글작성 요청\n    try {\n      const response = await axios.post('/api/postwrite', {\n        title: title,\n        content: content,\n        author: localStorage.getItem(\"id\")\n      });\n      if (response.data.success) {\n        // response에 success값이 true로 넘어오면 localStorage에 id, nickname, token 값 생성해서 로그인상태 유지\n\n        window.location.href = '/';\n      }\n    } catch (error) {\n      if (error.response.data.message) {\n        alert(\"에러: \" + error.response.data.message);\n      } else {\n        alert(\"에러 발생\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.postwrite,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: styles.input_title,\n      placeholder: \"\\uC81C\\uBAA9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694(\\uCD5C\\uB300 20\\uAE00\\uC790)\",\n      onChange: e => setTitle(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: styles.input_content,\n      placeholder: \"\\uAE00 \\uB0B4\\uC6A9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n      onChange: e => setContent(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 124\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: styles.btn_submit,\n      onClick: handleWrite,\n      children: \"\\uB4F1\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(PostWrite, \"eiXkh+GEjRZ8Svxty8bnXm2rLL0=\");\n_c = PostWrite;\nexport default PostWrite;\nvar _c;\n$RefreshReg$(_c, \"PostWrite\");","map":{"version":3,"names":["React","useState","styles","axios","jsxDEV","_jsxDEV","PostWrite","_s","title","setTitle","content","setContent","handleWrite","localStorage","token","alert","length","response","post","author","getItem","data","success","window","location","href","error","message","className","postwrite","children","type","input_title","placeholder","onChange","e","target","value","fileName","_jsxFileName","lineNumber","columnNumber","input_content","btn_submit","onClick","_c","$RefreshReg$"],"sources":["D:/Web Project/Community_Project/client/src/Pages/PostWrite/PostWrite.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styles from './PostWrite.module.css';\r\nimport axios from 'axios';\r\n\r\nfunction PostWrite() {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [content, setContent] = useState(\"\");\r\n\r\n    const handleWrite = async () => {\r\n\r\n        // 로그인 안돼있으면 작성 불가\r\n        if(!localStorage.token){\r\n            alert(\"글 쓰기는 로그인이 필요합니다.\");\r\n            return;\r\n        }\r\n    \r\n        // 글제목, 내용 입력 안돼있으면 return\r\n        if(title === \"\"){\r\n            alert(\"제목을 입력해주세요.\");\r\n            return;\r\n        } else if (title.length > 20){\r\n            alert(\"제목은 20글자를 초과 할 수 없습니다.\")\r\n            return;\r\n        }\r\n        if(content === \"\"){\r\n            alert(\"내용을 입력해주세요.\");\r\n            return;\r\n        }\r\n    \r\n        // 조건 만족하면 서버로 글작성 요청\r\n        try {\r\n          const response = await axios.post('/api/postwrite', {\r\n            title: title,\r\n            content: content,\r\n            author: localStorage.getItem(\"id\"),\r\n          });\r\n    \r\n          if(response.data.success){ // response에 success값이 true로 넘어오면 localStorage에 id, nickname, token 값 생성해서 로그인상태 유지\r\n\r\n            window.location.href = '/';\r\n          } \r\n    \r\n        } catch (error) {\r\n          if (error.response.data.message) {\r\n            alert(\"에러: \" + error.response.data.message);\r\n          } else {\r\n            alert(\"에러 발생\");\r\n          }\r\n        }\r\n    \r\n      };\r\n\r\n  return (\r\n    <div className={styles.postwrite}>\r\n        <input type=\"text\" className={styles.input_title} placeholder='제목을 입력하세요(최대 20글자)' onChange={(e) => setTitle(e.target.value)}/>\r\n        <hr/>\r\n        <textarea className={styles.input_content} placeholder='글 내용을 입력하세요' onChange={(e) => setContent(e.target.value)}/><br/>\r\n        <hr/>\r\n        <button type=\"button\" className={styles.btn_submit} onClick={handleWrite}>등록</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostWrite;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}